(defpackage euler-cl
  (:use :cl))
(in-package :euler-cl)

;; blah blah blah.

;; These problems were taken from: https://projecteuler.net
;; Account username: hamzashahid
;; Password is in keepassxc

(defun p1 (n)
  (loop :for x :below n
    :if (or (= (mod x 3) 0)
           (= (mod x 5) 0))
    :sum x))

;;-------------------------------------------------------

;; My Fibonacci (Slowwwwwwwww)
(defun fib (n)
  (if (<= n 2)
    n
    (+ (fib (- n 1))
       (fib (- n 2)))))

;; Optimized Fibonacci (Tail recursive)
(defun fib2 (n)
  (labels ((calc-fib (n a b)
                     (if (= n 0)
                       a
                       (calc-fib (- n 1) b (+ a b)))))
    (calc-fib n 0 1)))

(defun fib3 (n)
  (labels ((calc-fib (n a b)
                     (if (= n 0)
                       a
                       (calc-fib (- n 1) b (+ a b)))))
    (calc-fib n 0 1)))

(defun p2 (n)
  (loop :for x :from 1
    :while (< (fib2 x) n)
    :if (evenp (fib2 x))
    :sum (fib2 x)))

;;-------------------------------------------------------

;; Is very fast but small numbers like 15 aren't accurate
;; for accurate (small nums) but slow use commented line
;;(loop :for x :from 2 :upto (1- n)
;; We can use and since it is short circuited. This is why
;; we don't have to seperate it into after math
(defun primes (n)
  (loop :for x :from 2 :upto (sqrt n)
    :if (and (= (mod n x) 0)
             (null (primes x)))
    :collect x))

;; Accurate prime factors
(defun acc-primes (n)
  (loop :for x :from 2 :upto (1- n)
    :if (and (= (mod n x) 0)
             (null (primes x)))
    :collect x))

(defun p3 (n)
  (apply #'max (primes n)))

;;-------------------------------------------------------

(defun num-palindrome-p (num)
  (let ((strnum (write-to-string num)))
    (values
      (equal strnum (reverse strnum))
      (parse-integer (reverse strnum)))))

(defun num-palindrome (num)
  (parse-integer (reverse (write-to-string num))))

(defun p4 ()
  (loop :for x :from 999 :downto 900
    :append (loop :for y :from 999 :downto 900
              :if (= (* x y)
                     (num-palindrome (* x y)))
              :collect (* x y))))

;;-------------------------------------------------------

(defun p5-slow ()
  (loop :for x :from 1
    :if (every #'identity
          (mapcar
	        #'(lambda (y)
                (= (mod x y) 0))
            (loop :for i :from 3 :upto 20
              :collect i)))
    :do (return x)))

;; Take the LCM, faaaaaaaaaaaaaast way
(defun p5 ()
  (apply #'lcm
    (loop :for i :from 1 :upto 20
      :collect i)))

;;-------------------------------------------------------

(defun sqr (num)
  (* num num))

(defun sum-squares (n)
  (loop :for x :from 1 :upto n
    :sum (sqr x)))

(defun square-sum (n)
  (sqr (loop :for x :from 1 :upto n
         :sum x)))

(defun p6 (n)
  (- (square-sum n) (sum-squares n)))

(defun p6-all-in-one (n)
  (flet ((sqr (num)
           (* num num)))
    (-
      (sqr (loop :for x :from 1 :upto n
             :sum x))
      (loop :for x :from 1 :upto n
        :sum (sqr x)))))

;; nth prime number
(defun p7 (n)
  (let ((primes-list '()))
    (loop :for x :from 2 :until (= (length primes-list) n)
      :if (null (primes x))
      :do (push x primes-list))

    (car (last (nreverse primes-list)))))

(defun p8 ()
  ;; convert number to a string without newlines
  (let* ((num (remove #\newline "
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450"))

          ;; make a list of num's digits
          (digits (loop :for i :across num
                    :collect (parse-integer (string i)))))

    ;; ;; get the max of looping our list of digits in pairs of 13
    ;; (apply #'max
    ;;   (loop :for (a b c d e f g h i j k l m) :on digits :while m
    ;;     :collect (* a b c d e f g h i j k l m)))

    ;; SLOWER!!!
    (loop for stuff = digits
      then (cdr stuff)
      until (< (length stuff) 13)
      maximize (apply #'* (subseq stuff 0 13)))))
